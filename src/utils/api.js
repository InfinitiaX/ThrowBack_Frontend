// utils/api.js 
import axios from 'axios';

// Configuration de base
const BASE_URL = process.env.REACT_APP_API_URL || 'https://throwback-backend.onrender.com';

// Cr√©er une instance axios avec configuration par d√©faut
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 30000, // 30 secondes
  headers: {
    'Content-Type': 'application/json',
  },
});

// Intercepteur de requ√™te pour ajouter le token automatiquement
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // Log des requ√™tes importantes
    if (config.url.includes('/videos/') || config.url.includes('/memories') || config.url.includes('/like')) {
      console.log(` API Request: ${config.method?.toUpperCase()} ${config.url}`);
      if (config.data) {
        console.log('Request data:', config.data);
      }
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå Request error:', error);
    return Promise.reject(error);
  }
);

// Intercepteur de r√©ponse pour g√©rer les erreurs globalement
api.interceptors.response.use(
  (response) => {
    // Log des r√©ponses importantes
    if (response.config.url.includes('/videos/') || response.config.url.includes('/memories') || response.config.url.includes('/like')) {
      console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`);
      console.log('üìä Response data:', response.data);
    }
    return response;
  },
  (error) => {
    console.error('‚ùå API Error:', error);
    
    // Gestion sp√©cifique des erreurs courantes
    if (error.response) {
      const { status, data } = error.response;
      
      switch (status) {
        case 401:
          console.warn('üîê Unauthorized - Token expired or invalid');
          // Optionnel: rediriger vers login
          // window.location.href = '/login';
          break;
        case 403:
          console.warn('üö´ Forbidden - Insufficient permissions');
          break;
        case 404:
          console.warn('üîç Not Found - Resource does not exist');
          break;
        case 500:
          console.error('üí• Server Error - Internal server error');
          break;
        default:
          console.error(`‚ùå HTTP ${status}:`, data?.message || 'Unknown error');
      }
    } else if (error.request) {
      console.error('üåê Network Error - No response received:', error.request);
    } else {
      console.error('‚ö° Request Setup Error:', error.message);
    }
    
    return Promise.reject(error);
  }
);

// M√©thodes utilitaires sp√©cifiques pour VideoDetail
const videoAPI = {
  // R√©cup√©rer toutes les vid√©os publiques
  getAllVideos: async (params = {}) => {
    try {
      const queryParams = new URLSearchParams({
        type: 'music',
        limit: '50',
        ...params
      }).toString();
      
      console.log('üé¨ Fetching all videos with params:', queryParams);
      
      const response = await api.get(`/api/public/videos?${queryParams}`);
      
      // Gestion flexible de la structure de r√©ponse
      if (response.data.success) {
        return response.data.data || response.data.videos || [];
      } else if (Array.isArray(response.data)) {
        return response.data;
      } else {
        console.warn('‚ö†Ô∏è Unexpected response format:', response.data);
        return [];
      }
    } catch (error) {
      console.error('‚ùå Error fetching all videos:', error);
      
      // Fallback vers l'ancienne route si la nouvelle ne fonctionne pas
      try {
        console.log('üîÑ Trying fallback route...');
        const fallbackResponse = await api.get('/api/videos?type=music&limit=50');
        if (fallbackResponse.data.success) {
          return fallbackResponse.data.data || [];
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback also failed:', fallbackError);
      }
      
      return [];
    }
  },

  // R√©cup√©rer une vid√©o par ID
  getVideoById: async (videoId) => {
    try {
      console.log('üé¨ Fetching video by ID:', videoId);
      
      const response = await api.get(`/api/public/videos/${videoId}`);
      
      if (response.data.success) {
        return response.data.data || response.data;
      } else {
        throw new Error(response.data.message || 'Video not found');
      }
    } catch (error) {
      console.error('‚ùå Error fetching video by ID:', error);
      
      // Fallback vers l'ancienne route
      try {
        console.log('üîÑ Trying fallback route for video details...');
        const fallbackResponse = await api.get(`/api/videos/${videoId}`);
        if (fallbackResponse.data.success) {
          return fallbackResponse.data.data || fallbackResponse.data;
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback for video details also failed:', fallbackError);
      }
      
      throw error;
    }
  },

  // R√©cup√©rer les souvenirs d'une vid√©o
  getVideoMemories: async (videoId) => {
    try {
      console.log('üí≠ Fetching memories for video:', videoId);
      
      const response = await api.get(`/api/public/videos/${videoId}/memories`);
      
      if (response.data.success) {
        return response.data.data || [];
      } else {
        return [];
      }
    } catch (error) {
      console.error('‚ùå Error fetching video memories:', error);
      
      // Fallback vers l'ancienne route
      try {
        const fallbackResponse = await api.get(`/api/videos/${videoId}/memories`);
        if (fallbackResponse.data.success) {
          return fallbackResponse.data.data || [];
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback for memories also failed:', fallbackError);
      }
      
      return [];
    }
  },

  // Ajouter un souvenir
  addMemory: async (videoId, content) => {
    try {
      console.log('üí≠ Adding memory to video:', videoId);
      
      const response = await api.post(`/api/public/videos/${videoId}/memories`, {
        contenu: content
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Error adding memory:', error);
      
      // Fallback vers l'ancienne route
      try {
        const fallbackResponse = await api.post(`/api/videos/${videoId}/memories`, {
          contenu: content
        });
        return fallbackResponse.data;
      } catch (fallbackError) {
        console.error('‚ùå Fallback for adding memory also failed:', fallbackError);
      }
      
      throw error;
    }
  },

  // Liker une vid√©o
  likeVideo: async (videoId) => {
    try {
      console.log('‚ù§Ô∏è Liking video:', videoId);
      
      const response = await api.post(`/api/public/videos/${videoId}/like`, {});
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Error liking video:', error);
      
      // Fallback vers l'ancienne route
      try {
        const fallbackResponse = await api.post(`/api/videos/${videoId}/like`, {});
        return fallbackResponse.data;
      } catch (fallbackError) {
        console.error('‚ùå Fallback for liking also failed:', fallbackError);
      }
      
      throw error;
    }
  },

  // Partager une vid√©o
  shareVideo: async (videoId) => {
    try {
      console.log('üîÑ Sharing video:', videoId);
      
      const response = await api.post(`/api/public/videos/${videoId}/share`, {});
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Error sharing video:', error);
      
      // Fallback vers l'ancienne route
      try {
        const fallbackResponse = await api.post(`/api/videos/${videoId}/share`, {});
        return fallbackResponse.data;
      } catch (fallbackError) {
        console.error('‚ùå Fallback for sharing also failed:', fallbackError);
      }
      
      // Pour le partage, on peut simuler le succ√®s
      return { success: true, message: 'Partage enregistr√©' };
    }
  }
};

// Export unique pour √©viter les conflits
export { videoAPI };
export default api;